From bd660d07e5d9be503c8cb629dcdea4525de0a3b4 Mon Sep 17 00:00:00 2001
From: Alligator-1 <alligator.ak@gmail.com>
Date: Tue, 9 Jul 2024 13:53:49 +0500
Subject: [PATCH] x64_win_profiler

---
 compiler/x86_64/cgcpu.pas | 40 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 39 insertions(+), 1 deletion(-)

diff --git a/compiler/x86_64/cgcpu.pas b/compiler/x86_64/cgcpu.pas
index 36fcfc3238..957b043ca3 100644
--- a/compiler/x86_64/cgcpu.pas
+++ b/compiler/x86_64/cgcpu.pas
@@ -48,6 +48,8 @@       tcgx86_64 = class(tcgx86)
         procedure a_loadmm_intreg_reg(list: TAsmList; fromsize, tosize : tcgsize;intreg, mmreg: tregister; shuffle: pmmshuffle); override;
         procedure a_loadmm_reg_intreg(list: TAsmList; fromsize, tosize : tcgsize;mmreg, intreg: tregister;shuffle : pmmshuffle); override;
 
+        procedure gen_profiler_code(list: TAsmList; const func_name: string; v1: boolean = false);
+
         function use_ms_abi: boolean;
       private
         function use_push: boolean;
@@ -62,8 +64,41 @@       tcgx86_64 = class(tcgx86)
        globtype,globals,verbose,systems,cutils,cclasses,
        cpuinfo,
        symtable,paramgr,cpupi,
-       rgcpu,ncgutil;
+       rgcpu,ncgutil,sysutils;
+
+    procedure tcgx86_64.gen_profiler_code(list: TAsmList; const func_name: string; v1: boolean);
+    {$push}{$writeableconst on}
+    const
+      profiler_checked: boolean = false;
+      profiler_enabled: boolean = false;
+    {$pop}
+    var
+      sym: tasmsymbol;
+      ref: treference;
+    begin
+      if not profiler_checked then
+        begin
+          profiler_checked:=true;
+          profiler_enabled:=GetEnvironmentVariable('profiler')='1';
+        end;
 
+      if profiler_enabled and not defined_macro('NOPROFILING') and
+         ([po_assembler, po_noreturn]*current_procinfo.procdef.procoptions=[]) then
+        begin
+          if v1 then
+            begin
+              a_call_name(list, func_name, false);
+            end
+          else
+            begin
+              sym:=current_asmdata.RefAsmSymbol(func_name, AT_FUNCTION);
+              reference_reset_symbol(ref, sym, 0, sizeof(pint), []);
+              ref.refaddr:=addr_pic_no_got;
+              ref.base:=NR_RIP;
+              list.concat(taicpu.op_ref(A_CALL, S_NO, ref));
+            end;
+        end;
+    end;
 
     procedure Tcgx86_64.init_register_allocators;
       var
@@ -211,6 +246,7 @@       tcgx86_64 = class(tcgx86)
         { save old framepointer }
         if not nostackframe then
           begin
+            gen_profiler_code(list, 'profiler_enter');
             { return address }
             stackmisalignment := sizeof(pint);
             if current_procinfo.framepointer=NR_STACK_POINTER_REG then
@@ -432,6 +468,8 @@       tcgx86_64 = class(tcgx86)
         if current_procinfo.framepointer<>NR_STACK_POINTER_REG then
           list.concat(tai_regalloc.dealloc(NR_STACK_POINTER_REG,nil));
 
+        gen_profiler_code(list, 'profiler_leave');
+
         list.concat(Taicpu.Op_none(A_RET,S_NO));
 
         if (pi_has_unwind_info in current_procinfo.flags) then
-- 
2.46.0.windows.1

